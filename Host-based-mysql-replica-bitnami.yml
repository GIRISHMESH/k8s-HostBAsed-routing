# =========================================================
# 1️⃣ Namespaces
# =========================================================
apiVersion: v1
kind: Namespace
metadata:
  name: nginx-stack
---
apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx

# =========================================================
# 2️⃣ Secrets & ConfigMaps
# =========================================================
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: nginx-stack
type: Opaque
stringData:
  root-password: rootpass123
  repl-password: replpass123
  app-password: applogin123
---

# Remove this block completely
##apiVersion: v1
##kind: Secret
##metadata:
##  name: nginx-tls-secret
##  namespace: nginx-stack
##type: kubernetes.io/tls
##data:
##  tls.crt: <BASE64_CERT>
##  tls.key: <BASE64_KEY>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
  namespace: nginx-stack
data:
  mysql-url: mysql://mysql-0.mysql-headless.nginx-stack.svc.cluster.local:3306





# =========================================================
# 3️⃣ StorageClass
# =========================================================
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: mysql-storage
provisioner: kubernetes.io/azure-disk
reclaimPolicy: Retain
allowVolumeExpansion: true
parameters:
  skuName: Premium_LRS
  kind: managed
volumeBindingMode: WaitForFirstConsumer

# =========================================================
# 4️⃣ MySQL StatefulSet
# =========================================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: nginx-stack
spec:
  serviceName: mysql-headless
  replicas: 3   # 1 primary + 2 replicas
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: bitnami/mysql:8.0
          ports:
            - containerPort: 3306
              name: mysql
          env:
            # Root password for replication user creation
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: root-password

            # Replication settings
            - name: MYSQL_REPLICATION_MODE
              value: "master"   # automatically "slave" for replicas
            - name: MYSQL_REPLICATION_USER
              value: repl_user
            - name: MYSQL_REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: repl-password

            # Application database
            - name: MYSQL_DATABASE
              value: appdb
            - name: MYSQL_USER
              value: appuser
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: app-password

          volumeMounts:
            - name: mysql-data
              mountPath: /bitnami/mysql
  volumeClaimTemplates:
    - metadata:
        name: mysql-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi

# =========================================================
# 5️⃣ MySQL Services
# =========================================================
apiVersion: v1
kind: Service
metadata:
  name: mysql-headless
  namespace: nginx-stack
spec:
  clusterIP: None
  selector:
    app: mysql
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: nginx-stack
spec:
  type: ClusterIP
  selector:
    app: mysql
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql


# =========================================================
# 6️⃣ NetworkPolicy
# =========================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-nginx-to-mysql
  namespace: nginx-stack
spec:
  podSelector:
    matchLabels:
      app: mysql
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: nginx-web
      ports:
        - protocol: TCP
          port: 3306
  policyTypes:
    - Ingress

# =========================================================
# 7️⃣ MySQL Init Job
# =========================================================
apiVersion: batch/v1
kind: Job
metadata:
  name: init-mysql
  namespace: nginx-stack
spec:
  template:
    spec:
      containers:
        - name: mysql-init
          image: mysql:8.1
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: root-password
          command:
            - sh
            - -c
            - >
              mysql -h mysql-0.mysql-headless.nginx-stack.svc.cluster.local
              -u root -p$MYSQL_ROOT_PASSWORD
              -e "CREATE DATABASE IF NOT EXISTS appdb;"
      restartPolicy: OnFailure

# =========================================================
##3 different applications-->nginx-web, app1, app2
##3 Deployments (nginx-web, app1, app2)
##3 Services (ClusterIP per app)
##1 Ingress with path-based rules
==========================================================
# 8️⃣ Nginx Deployment & Service
# =========================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-web
  namespace: nginx-stack
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx-web
  template:
    metadata:
      labels:
        app: nginx-web
    spec:
      initContainers:
        - name: wait-for-mysql
          image: busybox
          command:
            - sh
            - -c
            - >
              until nc -z mysql.nginx-stack.svc.cluster.local 3306; do
                echo "Waiting for MySQL...";
                sleep 2;
              done
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 80
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-web
  namespace: nginx-stack
spec:
  selector:
    app: nginx-web
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP



# ================================
# App1 Deployment & Service
# ================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app1
  namespace: nginx-stack
spec:
  replicas: 2
  selector:
    matchLabels:
      app: app1
  template:
    metadata:
      labels:
        app: app1
    spec:
      containers:
        - name: app1
          image: hashicorp/http-echo
          args:
            - "-text=Hello from App1"
          ports:
            - containerPort: 5678
---
apiVersion: v1
kind: Service
metadata:
  name: app1
  namespace: nginx-stack
spec:
  selector:
    app: app1
  ports:
    - port: 80
      targetPort: 5678
  type: ClusterIP
---
# ================================
# App2 Deployment & Service
# ================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app2
  namespace: nginx-stack
spec:
  replicas: 2
  selector:
    matchLabels:
      app: app2
  template:
    metadata:
      labels:
        app: app2
    spec:
      containers:
        - name: app2
          image: hashicorp/http-echo
          args:
            - "-text=Hello from App2"
          ports:
            - containerPort: 5678
---
apiVersion: v1
kind: Service
metadata:
  name: app2
  namespace: nginx-stack
spec:
  selector:
    app: app2
  ports:
    - port: 80
      targetPort: 5678
  type: ClusterIP

  

# =========================================================
# 9️⃣ Ingress Controller
# =========================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-nginx-controller
  namespace: ingress-nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/component: controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/component: controller
    spec:
      containers:
        - name: controller
          image: registry.k8s.io/ingress-nginx/controller:v1.10.0
          args:
            - --controller-class=k8s.io/ingress-nginx
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
            - --election-id=ingress-controller-leader
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
---
apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx-controller
  namespace: ingress-nginx
spec:
  type: LoadBalancer
  loadBalancerIP: <STATIC_IP>
  selector:
    app.kubernetes.io/component: controller
  ports:
    - name: http
      port: 80
      targetPort: 80
    - name: https
      port: 443
      targetPort: 443
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: nginx
spec:
  controller: k8s.io/ingress-nginx


  ================================

##helm repo add jetstack https://charts.jetstack.io
##helm repo update
##helm install cert-manager jetstack/cert-manager \
##  --namespace cert-manager --create-namespace \
##  --version v1.16.0 \
##  --set installCRDs=true




apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: your-real-email@example.com    # replace with your email
    privateKeySecretRef:
      name: letsencrypt-prod-key
    solvers:
      - http01:
          ingress:
            class: nginx   # must match your IngressClass


# =========================================================
# 🔟 Ingress Resource
# =========================================================

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-stack-ingress
  namespace: nginx-stack
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - web.yourdomain.com
        - app1.yourdomain.com
        - app2.yourdomain.com
      secretName: nginx-tls-secret   # cert-manager will create this automatically
  rules:
    - host: web.yourdomain.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nginx-web
                port:
                  number: 80
    - host: app1.yourdomain.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: app1
                port:
                  number: 80
    - host: app2.yourdomain.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: app2
                port:
                  number: 80




# =========================================================
# 1️⃣1️⃣ ExternalDNS with Workload Identity (OIDC)
# =========================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns
  namespace: nginx-stack
  annotations:
    azure.workload.identity/client-id: <UAMI_CLIENT_ID>
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-dns
rules:
  - apiGroups: [""]
    resources: ["services", "endpoints", "pods", "nodes"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "watch", "list"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-dns-viewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns
subjects:
  - kind: ServiceAccount
    name: external-dns
    namespace: nginx-stack
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns
  namespace: nginx-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: external-dns
  template:
    metadata:
      labels:
        app: external-dns
    spec:
      serviceAccountName: external-dns
      containers:
        - name: external-dns
          image: registry.k8s.io/external-dns/external-dns:v0.14.1
          args:
            - --source=service
            - --source=ingress
            - --domain-filter=yourdomain.com
            - --provider=azure
            - --azure-resource-group=<DNS_RG_NAME>
            - --azure-subscription-id=<SUBSCRIPTION_ID>
            - --azure-user-assigned-identity-client-id=<UAMI_CLIENT_ID>
            - --log-level=debug
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi









